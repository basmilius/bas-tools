package com.basmilius.bastools.language.cappuccino

import com.basmilius.bastools.resource.Icons
import com.intellij.openapi.fileEditor.FileEditor
import com.intellij.openapi.project.Project
import com.intellij.openapi.util.Key
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.psi.PsiManager
import com.intellij.ui.EditorNotificationPanel
import com.intellij.ui.EditorNotifications
import com.intellij.util.ui.UIUtil
import com.jetbrains.php.lang.psi.PhpFileImpl
import com.jetbrains.php.lang.psi.elements.impl.ClassReferenceImpl
import com.jetbrains.php.lang.psi.elements.impl.PhpClassImpl

class CappuccinoGeneratedTemplateNotification : EditorNotifications.Provider<EditorNotificationPanel>()
{

	companion object
	{
		val KEY = Key.create<EditorNotificationPanel>("com.basmilius.bastools.language.cappuccino.generatedTemplateFile")
	}

	override fun getKey() = KEY

	override fun createNotificationPanel(file: VirtualFile, fileEditor: FileEditor, project: Project): EditorNotificationPanel?
	{
		val psiFile = PsiManager.getInstance(project).findFile(file) as? PhpFileImpl ?: return null
		val topLevelClassKey = psiFile.topLevelDefs.keySet().firstOrNull { it.startsWith("\\CT_") || it.startsWith("CT_") } ?: return null
		val psiClass = psiFile.topLevelDefs[topLevelClassKey].first() as? PhpClassImpl ?: return null
		val isTemplate = psiClass.extendsList.referenceElements
				.filterIsInstance<ClassReferenceImpl>()
				.any { it.fqn == "\\Cappuccino\\Template" }

		if (!isTemplate)
			return null

		return EditorNotificationPanel(UIUtil.getPanelBackground())
				.icon(Icons.CappuccinoFile)
				.text("This file was automatically generated by the Cappuccino Templating Engine and should not be edited.")
	}

}