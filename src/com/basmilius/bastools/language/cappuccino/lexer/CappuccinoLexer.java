package com.basmilius.bastools.language.cappuccino.lexer;

import com.basmilius.bastools.language.cappuccino.CappuccinoTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.io.IOException;
import java.io.Reader;

public class CappuccinoLexer implements FlexLexer
{

	public static final int YYEOF = -1;
	private static final int ZZ_BUFFERSIZE = 16384;
	public static final int YYINITIAL = 0;
	public static final int TWIG = 2;
	public static final int TWIG_DOUBLEQUOTED_STRING = 4;
	public static final int TWIG_SINGLEQUOTED_STRING = 6;
	public static final int TWIG_RAW = 8;
	public static final int RAW_TEMPLATE_DATA = 10;
	public static final int TWIG_START = 12;
	public static final int TWIG_COMMENT = 14;
	public static final int VERBATIM_START = 16;
	public static final int VERBATIM = 18;
	private static final int[] ZZ_LEXSTATE = new int[]{0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9};
	static final char[] ZZ_CMAP_Z = zzUnpackCMap("\u0001\u0000C\u0080");
	static final char[] ZZ_CMAP_Y = zzUnpackCMap("\u0001\u0000\u0001\u0001\u0001\u0002*\u0003\u0001\u0004\u0012\u0003\u0001\u0005\u001f\u0003\u0001\u0004\u009f\u0003");
	static final char[] ZZ_CMAP_A = zzUnpackCMap("\t\u0000\u0001\u0014\u0001\u000b\u0001\u0001\u0001\u0014\u0001\u000b\u0012\u0000\u0001\u0014\u0001)\u0001\u000f\u0001\u0003\u0001\u0000\u0001\u0006\u0001\u0000\u0001\u0010\u00017\u00018\u0001-\u0001\u000e\u00016\u0001\u0005\u0001\f\u0001.\n\t\u00015\u0001\u0000\u0001*\u0001(\u0001+\u0001:\u0001\u0000\u0001\u0012\u0001\u001e\u00010\u0001\u0019\u0001\r\u0001%\u0001\u0007\u00012\u0001!\u0002\u0007\u0001/\u0001\"\u0001\u0017\u0001$\u0001#\u0001\u0007\u0001\u0011\u0001'\u0001\u001f\u0001\u0007\u0001\u001d\u0001\u0013\u00011\u0002\u0007\u00013\u0001\n\u00014\u0001\u0000\u0001\b\u0001\u0000\u0001\u001b\u0001\u001e\u00010\u0001\u0018\u0001\u0015\u0001%\u0001\u0007\u00012\u0001!\u0002\u0007\u0001/\u0001\"\u0001\u0016\u0001$\u0001#\u0001\u0007\u0001\u001a\u0001'\u0001\u001f\u0001\u0007\u0001\u001d\u0001\u001c\u00011\u0002\u0007\u0001\u0002\u00019\u0001\u0004\u0001,\u0006\u0000\u0001\u0001\u001a\u0000\u0001\u0001\u008f\u0000\u0002 M\u0000\u0001&\u0080\u0000\u0001\u0001\u007f\u0000\u000b\u0001\u001d\u0000\u0002\u0001\u0005\u0000\u0001\u0001/\u0000\u0001\u0001 \u0000");
	private static final int[] ZZ_ACTION = zzUnpackAction();
	private static final String ZZ_ACTION_PACKED_0 = "\u0005\u0000\u0001\u0001\u0001\u0000\u0001\u0002\u0001\u0000\u0001\u0003\u0002\u0000\u0002\u0001\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\b\u0001\t\u0002\n\u0001\u000b\u0001\f\u0001\r\u0001\u000e\u0001\u000f\u0002\n\u0001\u0004\u0003\n\u0001\u0010\u0001\u0004\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u0004\u0001\u001f\u0001\u001e\u0001\u0004\u0001 \u0003\u0004\u0001\u0001\u0003\u0004\u0001!\u0001\u0004\u0002!\u0002\u0002\u0004\"\u0002\u0003\u0002\u0000\u0001#\u0001$\u0001%\u0001&\u0002\u0000\u0001'\u0001\u0000\u0002\n\u0001\u0000\u0001\u000b\u0001(\u0001\n\u0002)\u0001\n\u0001*\u0001\u0000\u0001+\u0001,\u0001*\u0001\n\u0001+\u0001,\u0001-\u0001\n\u0001.\u0001/\u00010\u00011\u00012\u00013\u0005\u0000\u00014\u0002\u0000\u0001%\u0001\u0000\u0002!\u0001\u0002\u00015\u00016\u00017\u0001\u0000\u0001\u0003\u0003\u0000\u0001#\u0001\u0000\u0001%\u0001\u0000\u0003\n\u0002\u000b\u00018\u00019\u0001\u0000\u0002\n\u0001:\u0001\u0000\u0001\u0001\u0002\u0000\u0002!\b\u0000\u0003\n\u0001\u0000\u0001\n\u0001\u0000\u0002\u0001\u0002\u0000\u0001!\u0001;\u0005\u0000\u0002<\u0002\n\u0001\u0000\u0001\n\u0001=\u0002\u0001\u0002\u0000\u0001!\u0002\u0000\u0001>\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0002?\u0001\u0001\u0001\u0000\u0001;\u0003\u0000\u0001\n\u0001\u0000\u0001\u0001\u0004\u0000\u0001\u0001\u0006\u0000\u0001@\u0005\u0000\u0001A";
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
	private static final String ZZ_ROWMAP_PACKED_0 = "\u0000\u0000\u0000;\u0000v\u0000±\u0000ì\u0000ħ\u0000Ţ\u0000Ɲ\u0000ǘ\u0000ȓ\u0000Ɏ\u0000ʉ\u0000˄\u0000˿\u0000˄\u0000̺\u0000˄\u0000͵\u0000ΰ\u0000ϫ\u0000Ц\u0000ѡ\u0000Ҝ\u0000ӗ\u0000˄\u0000˄\u0000˄\u0000Ԓ\u0000Ս\u0000\u0588\u0000׃\u0000\u05fe\u0000ع\u0000ٴ\u0000گ\u0000۪\u0000ܥ\u0000˄\u0000ݠ\u0000ޛ\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000ߖ\u0000ࠑ\u0000ࡌ\u0000\u0887\u0000\u08c2\u0000ࣽ\u0000स\u0000ॳ\u0000ম\u0000৩\u0000ਤ\u0000\u0a5f\u0000ϫ\u0000ચ\u0000\u0ad5\u0000ଐ\u0000ୋ\u0000ஆ\u0000ு\u0000˄\u0000\u0bfc\u0000ష\u0000\u0c72\u0000ಭ\u0000೨\u0000ണ\u0000\u0d5e\u0000\u0d99\u0000˄\u0000ු\u0000˄\u0000͵\u0000ϫ\u0000˄\u0000ฏ\u0000๊\u0000\u0e85\u0000ເ\u0000\u0efb\u0000˄\u0000༶\u0000˄\u0000Ц\u0000ཱ\u0000˄\u0000ྫྷ\u0000˄\u0000˄\u0000Ц\u0000\u0fe7\u0000Ц\u0000Ц\u0000Ц\u0000ဢ\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000ࠑ\u0000ࡌ\u0000\u08c2\u0000ࣽ\u0000ॳ\u0000˄\u0000ၝ\u0000႘\u0000დ\u0000ᄎ\u0000ᅉ\u0000ᆄ\u0000˄\u0000˄\u0000˄\u0000˄\u0000ᆿ\u0000˄\u0000ᇺ\u0000ስ\u0000ተ\u0000˄\u0000ካ\u0000ዦ\u0000ጡ\u0000\u135c\u0000᎗\u0000Ꮢ\u0000ᐍ\u0000ᑈ\u0000Ц\u0000Ц\u0000ᒃ\u0000ᒾ\u0000ᓹ\u0000˄\u0000დ\u0000ᔴ\u0000ᕯ\u0000ᖪ\u0000ᗥ\u0000ᘠ\u0000ᙛ\u0000ᚖ\u0000˄\u0000ᛑ\u0000ᜌ\u0000ᝇ\u0000គ\u0000ួ\u0000៸\u0000ᠳ\u0000ᡮ\u0000ᢩ\u0000ᣤ\u0000\u191f\u0000ᥚ\u0000ᦕ\u0000᧐\u0000ᨋ\u0000ᩆ\u0000ચ\u0000᪁\u0000\u1abc\u0000ᛑ\u0000\u1af7\u0000ᬲ\u0000˄\u0000Ц\u0000᭭\u0000ᮨ\u0000ᯣ\u0000ᰞ\u0000˄\u0000᱙\u0000\u1c94\u0000\u1ccf\u0000ᴊ\u0000ᵅ\u0000ᶀ\u0000ᶻ\u0000˄\u0000\u1df6\u0000ḱ\u0000Ṭ\u0000ầ\u0000˄\u0000Ц\u0000Ợ\u0000Ἕ\u0000˄\u0000\u1f58\u0000ᾓ\u0000῎\u0000 \u0000⁄\u0000ⁿ\u0000₺\u0000\u20f5\u0000ℰ\u0000Ⅻ\u0000↦\u0000⇡\u0000∜\u0000≗\u0000⊒\u0000⋍\u0000⌈\u0000˄\u0000⍃\u0000⍾\u0000⎹\u0000\u23f4\u0000\u242f\u0000˄";
	private static final int[] ZZ_TRANS = zzUnpackTrans();
	private static final String ZZ_TRANS_PACKED_0 = "\u0002\r\u0001\u000e8\r\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u000f\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u000f\u0001\u0010\u0001\u0018\u0001\u0015\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u0015\u0001\u001c\u0001\u0015\u0001\u0010\u0001\u0015\u0002\u001d\u0003\u0015\u0001\u001c\u0004\u0015\u0001\u001e\u0001\u001f\u0002\u0015\u0001 \u0001!\u0001\u000f\u0001\u0015\u0001\"\u0001#\u0001$\u0001%\u0001&\u0001'\u0001(\u0004\u0015\u0001)\u0001*\u0001+\u0001,\u0001-\u0001.\u0001/\u00010\n1\u00012\u00041\u00013+1\n4\u00015\u00054\u00016*4\u0001\u000f\u0001\u0010\u0003\u000f\u00017\u00018\u0004\u000f\u0001\u0010\u0005\u000f\u00019\u0002\u000f\u0001\u0010\u0005\u000f\u00019 \u000f\u0002:\u0001;8:\u0001\u000f\u0001\u0010\u0003\u000f\u0001<\u0001=\u0002>\u0002\u000f\u0001\u0010\u0001\u000f\u0001>\u0003\u000f\u0003>\u0001\u0010\u000b>\u0001?\u0001@\u0003>\u0001A\u0001\u000f\u0001>\u0007\u000f\u0004>\b\u000f\u0003B\u0001C7B\u0001D\u0001\u0010\u0001E\u0003D\u0001F\u0004D\u0001\u0010\bD\u0001\u0010\bD\u0001G\u001dD\u0002H\u0001I8H\u0002\u0000\u0001JK\u0000\u0001K\b\u0000\u0001K[\u0000\u0001L\u0001M\u0002\u0000\u0001N5\u0000\u0001\u0010\t\u0000\u0001\u0010\b\u0000\u0001\u0010*\u0000\u0001O:\u0000\u0001P\u0001\u0000\u0001Q8\u0000\u0001R=\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001S\u0001T\u0007\u0000\u0001\u0015\u0001U\u0002\u0015\u0011\u0000\u0001\u0017\u0002\u0000\u0001V\u0001W\u0007\u0000\u0001W1\u0000\u0001X5\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u0001\u0015\u0002Y\b\u0015\u0001\u0000\u0005\u0015\u0001Z\u0001[\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0003\u0015\u0001\\\u0001\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u001e\u0000\u0002]\n\u0000\u0001^\u0002\u0000\u0001_\u0002`\u001a\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u0001\u0015\u0002a\b\u0015\u0001\u0000\u0001\u0015\u0001b\u0002\u0015\u0001c\u0001`\u0001d\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001e\u0002\u0015\u0001\u0000\u0005\u0015\u0001e\u0005\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001\u0015\u0001f\u0001\u0015\u0001\u0000\u0006\u0015\u0001f\u0004\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u00150\u0000\u0001g:\u0000\u0001h:\u0000\u0001i:\u0000\u0001j?\u0000\u0001k;\u0000\u0001l\f\u0000\n1\u0001m\u00041\u0001n61\u0001\u0000/1\u000f\u0000\u00011+\u0000\n4\u0001o\u00054\u0001p54\u0001\u0000/4\u0010\u0000\u000140\u0000\u0001q8\u0000\u0001rH\u0000\u0001s\b\u0000\u0001s\u001f\u0000\u0002:\u0001t>:\u0001u4:\u0006\u0000\u0001Q;\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0005>\u0001\u0000\u0001>\u0007\u0000\u0004>*\u0000\u0001v\u001f\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0001>\u0001w\u0003>\u0001\u0000\u0001>\u0007\u0000\u0004>\u000f\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0001x\u0002>\u0001\u0000\u0005>\u0001x\u0005>\u0001\u0000\u0005>\u0001\u0000\u0001>\u0007\u0000\u0004>\b\u0000\u0003B\u0001\u00007B\u0004y\u0001z6y\u0006\u0000\u0001{8\u0000\u0001|C\u0000\u0001}\u0007\u0000\u0001}%\u0000\u0002H\u0001\u00008H\u0006~\u0001\u007f4~\u0006\u0000\u0001\u0080F\u0000\u0001\u0081\b\u0000\u0001\u0081$\u0000\u0001\u00826\u0000\u0001\u0083\u0003\u0000\u0001\u0084\u0005\u0000\u0001\u0083\b\u0000\u0001\u00833\u0000\u0001\u0085\u0007\u0000\u0001\u0085,\u0000\u0003\u0015\u0003\u0000\u0001\u0086\u0003\u0000\u0003\u0015\u0001\u0000\u0001\u0086\n\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0003\u0015\u0001\u0087\u0001\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0003\u0015\u0001\u0088\u0011\u0000\u0001\u00896\u0000\u0001\u008a\u0003\u0000\u0001\u008a\u0004\u0000\u0001\u008a3\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u0003\u0015\u0002\u008b\u0006\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\n\u0015\u0001\u008c\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015+\u0000\u0001\u008d\u001e\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0002\u0015\u0001\u008e\u0002\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0001\u008f\u0003\u0015\u001b\u0000\u0001\u0090\b\u0000\u0001\u0090\u001e\u0000\u0006:\u0001\u00915:\u0001\u0092\t:\u0001\u0093\b:\u0001\u0093\u0001\u0000%:#\u0000\u0001\u0094\u001e\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0002>\u0001\u0095\u0002>\u0001\u0000\u0001>\u0007\u0000\u0004>\u000f\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0003>\u0001\u0096\u0001>\u0001\u0000\u0001>\u0007\u0000\u0004>\u0019\u0000\u0001\u0097\b\u0000\u0001\u0097!\u0000\u0001\u007f\t\u0000\u0001\u007f\u0001\u0000\u0001\u0098\u0006\u0000\u0001\u007f\u0001\u0098*\u0000\u0001\u0099F\u0000\u0001\u009a\b\u0000\u0001\u009a!\u0000\u0001\u0083\t\u0000\u0001\u0083\u0005\u0000\u0001\u009b\u0002\u0000\u0001\u0083\u0005\u0000\u0001\u009b\u0002\u0000\u0001\u009c\u001e\u0000\u0001\u009d\t\u0000\u0001\u009d\b\u0000\u0001\u009dU\u0000\u0001\u009e\u0012\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0001\u009f\u0003\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u0001\u0015\u0002 \b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001\u0015\u0001¡\u0001\u0015\u0001\u0000\u0006\u0015\u0001¡\u0004\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u0011\u0000\u0001\u0089\u0003\u0000\u0001W\u0007\u0000\u0001W.\u0000\u0001\u008aU\u0000\u0001¢\u001d\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0003\u0015\u0001£\u0001\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001¤\u0001\u0015\u0007\u0000\u0004\u0015\b\u0000\u0001:\u0001\u0092\u0001¥\b:\u0001\u0092\u0001:\u0001¦\u0006:\u0001\u0092\u0001¦&:\u0001\u0092\t:\u0001\u0093\u0001:\u0001¦\u0006:\u0001\u0093\u0001§%:$\u0000\u0001¨\u001d\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0003>\u0001©\u0001>\u0001\u0000\u0001>\u0007\u0000\u0004>\u000f\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0001>\u0001ª\u0003>\u0001\u0000\u0001>\u0007\u0000\u0004>&\u0000\u0001«2\u0000\u0002¬$\u0000\u0001\u00ad\t\u0000\u0001\u00ad\b\u0000\u0001\u00ad8\u0000\u0001®\b\u0000\u0001®,\u0000\u0001¯\u0007\u0000\u0001¯&\u0000\u0001\u009d\t\u0000\u0001\u009d\u0005\u0000\u0001\u009b\u0002\u0000\u0001\u009d\u0005\u0000\u0001\u009bE\u0000\u0001°\u001c\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0004\u0015\u0001±\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\n\u0015\u0001²\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001³\u0002\u0015\u0001\u0000\u0005\u0015\u0001³\u0005\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u0019\u0000\u0001´\b\u0000\u0001´'\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001µ\u0002\u0015\u0001\u0000\u0005\u0015\u0001µ\u0005\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u0015\u0000\u0001¶\u0007\u0000\u0001¶%\u0000\u0002:\u0001¥\u0003:\u0001·6:\u0001¥\u0013:\u0002¸9:\u0001¹\u0001¸#:\u0011\u0000\u0001º\b\u0000\u0001º'\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0001»\u0002>\u0001\u0000\u0005>\u0001»\u0005>\u0001\u0000\u0005>\u0001\u0000\u0001>\u0007\u0000\u0004>\u001a\u0000\u0001¼\b\u0000\u0001¼7\u0000\u0002½4\u0000\u0001¾\b\u0000\u0001¾/\u0000\u0001¿\b\u0000\u0001¿'\u0000\u0003\u0015\u0003\u0000\u0001À\u0003\u0000\u0003\u0015\u0001\u0000\u0001À\n\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001Á\u0001Â\u0007\u0000\u0004\u0015'\u0000\u0001Ã\"\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\n\u0015\u0001Ä\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\b\u0000\u0001:\u0001\u0092\u0001¥\b:\u0001\u0092\b:\u0001\u0092(:\u0001¥\u0015:\u0002Å9:\u0001Æ\u0001Å!:\u001f\u0000\u0001Ç\"\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\n>\u0001ª\u0001\u0000\u0005>\u0001\u0000\u0001>\u0007\u0000\u0004>'\u0000\u0001È8\u0000\u0001É;\u0000\u0001Ê#\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0002\u0015\u0001Ë\u0001\u0015\u0015\u0000\u0001Ì\u0007\u0000\u0001Ì,\u0000\u0003\u0015\u0003\u0000\u0001Ë\u0003\u0000\u0003\u0015\u0001\u0000\u0001Ë\n\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\b\u0000\u0002:\u0001¥\u000e:\u0001Í\b:\u0001Í1:\u0001Í\b:\u0001Î : \u0000\u0002Ï&\u0000\u0001Ð\u0007\u0000\u0001Ð7\u0000\u0001Ñ\b\u0000\u0001Ñ&\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\n\u0015\u0001±\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015'\u0000\u0001°\u001b\u0000\u0002:\u0001¥\u000f:\u0001Ò\b:\u0001Ò1:\u0001Ò\b:\u0001Ó\u001f:\"\u0000\u0001\u0090)\u0000\u0001Ô\b\u0000\u0001Ô?\u0000\u0001Õ\u001b\u0000\u0002:\u0001¥T:\u0001\u0000\u001e:\u001e\u0000\u0001Ö<\u0000\u0002×+\u0000\u0001Ø\b\u0000\u0001ØA\u0000\u0001Ù7\u0000\u0001Ú;\u0000\u0002Û;\u0000\u0001Ü\u0019\u0000\u0001Ý\t\u0000\u0001Ý\b\u0000\u0001Ý'\u0000\u0001Ý\u0004\u0000\u0001Þ\u0004\u0000\u0001Ý\b\u0000\u0001Ý*\u0000\u0001ß6\u0000";
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final String[] ZZ_ERROR_MSG = new String[]{"Unknown internal scanner error", "Error: could not match input", "Error: pushback value was too large"};
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\u0005\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0002\u0000\u0001\t\u0001\u0001\u0001\t\u0001\u0001\u0001\t\u0007\u0001\u0003\t\n\u0001\u0001\t\u0002\u0001\b\t\u0013\u0001\u0001\t\u0005\u0001\u0002\u0000\u0001\u0001\u0001\t\u0001\u0001\u0001\t\u0002\u0000\u0001\t\u0001\u0000\u0002\u0001\u0001\u0000\u0001\u0001\u0001\t\u0001\u0001\u0001\t\u0002\u0001\u0001\t\u0001\u0000\u0002\t\u0006\u0001\u0006\t\u0005\u0000\u0001\t\u0002\u0000\u0001\u0001\u0001\u0000\u0002\u0001\u0004\t\u0001\u0000\u0001\t\u0001\u0000\u0001\u0001\u0001\u0000\u0001\t\u0001\u0000\u0001\u0001\u0001\u0000\u0007\u0001\u0001\u0000\u0002\u0001\u0001\t\u0001\u0000\u0001\u0001\u0002\u0000\u0002\u0001\u0002\u0000\u0001\t\u0005\u0000\u0003\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0002\u0001\u0002\u0000\u0002\u0001\u0002\u0000\u0001\u0001\u0002\u0000\u0001\t\u0003\u0001\u0001\u0000\u0001\u0001\u0001\t\u0002\u0001\u0002\u0000\u0001\u0001\u0002\u0000\u0001\t\u0001\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\t\u0002\u0001\u0001\u0000\u0001\t\u0003\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0004\u0000\u0001\u0001\u0006\u0000\u0001\t\u0005\u0000\u0001\t";
	private Reader zzReader;
	private int zzState;
	private int zzLexicalState;
	private CharSequence zzBuffer;
	private int zzMarkedPos;
	private int zzCurrentPos;
	private int zzStartRead;
	private int zzEndRead;
	private boolean zzAtBOL;
	private boolean zzAtEOF;
	private boolean zzEOFDone;
	private boolean[] zzFin;
	private int braceLevel;
	private boolean afterTagStart;
	private CappuccinoLexer.SecondaryState mySecondaryState;

	public static int ZZ_CMAP (int ch)
	{
		return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch >> 14] | ch >> 7 & 127] << 7 | ch & 127];
	}

	private static int[] zzUnpackAction ()
	{
		int[] result = new int[223];
		int offset = 0;
		zzUnpackAction("\u0005\u0000\u0001\u0001\u0001\u0000\u0001\u0002\u0001\u0000\u0001\u0003\u0002\u0000\u0002\u0001\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\b\u0001\t\u0002\n\u0001\u000b\u0001\f\u0001\r\u0001\u000e\u0001\u000f\u0002\n\u0001\u0004\u0003\n\u0001\u0010\u0001\u0004\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u0004\u0001\u001f\u0001\u001e\u0001\u0004\u0001 \u0003\u0004\u0001\u0001\u0003\u0004\u0001!\u0001\u0004\u0002!\u0002\u0002\u0004\"\u0002\u0003\u0002\u0000\u0001#\u0001$\u0001%\u0001&\u0002\u0000\u0001'\u0001\u0000\u0002\n\u0001\u0000\u0001\u000b\u0001(\u0001\n\u0002)\u0001\n\u0001*\u0001\u0000\u0001+\u0001,\u0001*\u0001\n\u0001+\u0001,\u0001-\u0001\n\u0001.\u0001/\u00010\u00011\u00012\u00013\u0005\u0000\u00014\u0002\u0000\u0001%\u0001\u0000\u0002!\u0001\u0002\u00015\u00016\u00017\u0001\u0000\u0001\u0003\u0003\u0000\u0001#\u0001\u0000\u0001%\u0001\u0000\u0003\n\u0002\u000b\u00018\u00019\u0001\u0000\u0002\n\u0001:\u0001\u0000\u0001\u0001\u0002\u0000\u0002!\b\u0000\u0003\n\u0001\u0000\u0001\n\u0001\u0000\u0002\u0001\u0002\u0000\u0001!\u0001;\u0005\u0000\u0002<\u0002\n\u0001\u0000\u0001\n\u0001=\u0002\u0001\u0002\u0000\u0001!\u0002\u0000\u0001>\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0002?\u0001\u0001\u0001\u0000\u0001;\u0003\u0000\u0001\n\u0001\u0000\u0001\u0001\u0004\u0000\u0001\u0001\u0006\u0000\u0001@\u0005\u0000\u0001A", offset, result);
		return result;
	}

	private static int zzUnpackAction (String packed, int offset, int[] result)
	{
		int i = 0;
		int j = offset;
		int l = packed.length();

		while (i < l)
		{
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);

			while (true)
			{
				result[j++] = value;
				--count;
				if (count <= 0)
				{
					break;
				}
			}
		}

		return j;
	}

	private static int[] zzUnpackRowMap ()
	{
		int[] result = new int[223];
		int offset = 0;
		zzUnpackRowMap("\u0000\u0000\u0000;\u0000v\u0000±\u0000ì\u0000ħ\u0000Ţ\u0000Ɲ\u0000ǘ\u0000ȓ\u0000Ɏ\u0000ʉ\u0000˄\u0000˿\u0000˄\u0000̺\u0000˄\u0000͵\u0000ΰ\u0000ϫ\u0000Ц\u0000ѡ\u0000Ҝ\u0000ӗ\u0000˄\u0000˄\u0000˄\u0000Ԓ\u0000Ս\u0000\u0588\u0000׃\u0000\u05fe\u0000ع\u0000ٴ\u0000گ\u0000۪\u0000ܥ\u0000˄\u0000ݠ\u0000ޛ\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000ߖ\u0000ࠑ\u0000ࡌ\u0000\u0887\u0000\u08c2\u0000ࣽ\u0000स\u0000ॳ\u0000ম\u0000৩\u0000ਤ\u0000\u0a5f\u0000ϫ\u0000ચ\u0000\u0ad5\u0000ଐ\u0000ୋ\u0000ஆ\u0000ு\u0000˄\u0000\u0bfc\u0000ష\u0000\u0c72\u0000ಭ\u0000೨\u0000ണ\u0000\u0d5e\u0000\u0d99\u0000˄\u0000ු\u0000˄\u0000͵\u0000ϫ\u0000˄\u0000ฏ\u0000๊\u0000\u0e85\u0000ເ\u0000\u0efb\u0000˄\u0000༶\u0000˄\u0000Ц\u0000ཱ\u0000˄\u0000ྫྷ\u0000˄\u0000˄\u0000Ц\u0000\u0fe7\u0000Ц\u0000Ц\u0000Ц\u0000ဢ\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000˄\u0000ࠑ\u0000ࡌ\u0000\u08c2\u0000ࣽ\u0000ॳ\u0000˄\u0000ၝ\u0000႘\u0000დ\u0000ᄎ\u0000ᅉ\u0000ᆄ\u0000˄\u0000˄\u0000˄\u0000˄\u0000ᆿ\u0000˄\u0000ᇺ\u0000ስ\u0000ተ\u0000˄\u0000ካ\u0000ዦ\u0000ጡ\u0000\u135c\u0000᎗\u0000Ꮢ\u0000ᐍ\u0000ᑈ\u0000Ц\u0000Ц\u0000ᒃ\u0000ᒾ\u0000ᓹ\u0000˄\u0000დ\u0000ᔴ\u0000ᕯ\u0000ᖪ\u0000ᗥ\u0000ᘠ\u0000ᙛ\u0000ᚖ\u0000˄\u0000ᛑ\u0000ᜌ\u0000ᝇ\u0000គ\u0000ួ\u0000៸\u0000ᠳ\u0000ᡮ\u0000ᢩ\u0000ᣤ\u0000\u191f\u0000ᥚ\u0000ᦕ\u0000᧐\u0000ᨋ\u0000ᩆ\u0000ચ\u0000᪁\u0000\u1abc\u0000ᛑ\u0000\u1af7\u0000ᬲ\u0000˄\u0000Ц\u0000᭭\u0000ᮨ\u0000ᯣ\u0000ᰞ\u0000˄\u0000᱙\u0000\u1c94\u0000\u1ccf\u0000ᴊ\u0000ᵅ\u0000ᶀ\u0000ᶻ\u0000˄\u0000\u1df6\u0000ḱ\u0000Ṭ\u0000ầ\u0000˄\u0000Ц\u0000Ợ\u0000Ἕ\u0000˄\u0000\u1f58\u0000ᾓ\u0000῎\u0000 \u0000⁄\u0000ⁿ\u0000₺\u0000\u20f5\u0000ℰ\u0000Ⅻ\u0000↦\u0000⇡\u0000∜\u0000≗\u0000⊒\u0000⋍\u0000⌈\u0000˄\u0000⍃\u0000⍾\u0000⎹\u0000\u23f4\u0000\u242f\u0000˄", offset, result);
		return result;
	}

	private static int zzUnpackRowMap (String packed, int offset, int[] result)
	{
		int i = 0;
		int j = offset;

		int high;
		for (int l = packed.length(); i < l; result[j++] = high | packed.charAt(i++))
		{
			high = packed.charAt(i++) << 16;
		}

		return j;
	}

	private static int[] zzUnpackTrans ()
	{
		int[] result = new int[9322];
		int offset = 0;
		zzUnpackTrans("\u0002\r\u0001\u000e8\r\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u000f\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u000f\u0001\u0010\u0001\u0018\u0001\u0015\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u0015\u0001\u001c\u0001\u0015\u0001\u0010\u0001\u0015\u0002\u001d\u0003\u0015\u0001\u001c\u0004\u0015\u0001\u001e\u0001\u001f\u0002\u0015\u0001 \u0001!\u0001\u000f\u0001\u0015\u0001\"\u0001#\u0001$\u0001%\u0001&\u0001'\u0001(\u0004\u0015\u0001)\u0001*\u0001+\u0001,\u0001-\u0001.\u0001/\u00010\n1\u00012\u00041\u00013+1\n4\u00015\u00054\u00016*4\u0001\u000f\u0001\u0010\u0003\u000f\u00017\u00018\u0004\u000f\u0001\u0010\u0005\u000f\u00019\u0002\u000f\u0001\u0010\u0005\u000f\u00019 \u000f\u0002:\u0001;8:\u0001\u000f\u0001\u0010\u0003\u000f\u0001<\u0001=\u0002>\u0002\u000f\u0001\u0010\u0001\u000f\u0001>\u0003\u000f\u0003>\u0001\u0010\u000b>\u0001?\u0001@\u0003>\u0001A\u0001\u000f\u0001>\u0007\u000f\u0004>\b\u000f\u0003B\u0001C7B\u0001D\u0001\u0010\u0001E\u0003D\u0001F\u0004D\u0001\u0010\bD\u0001\u0010\bD\u0001G\u001dD\u0002H\u0001I8H\u0002\u0000\u0001JK\u0000\u0001K\b\u0000\u0001K[\u0000\u0001L\u0001M\u0002\u0000\u0001N5\u0000\u0001\u0010\t\u0000\u0001\u0010\b\u0000\u0001\u0010*\u0000\u0001O:\u0000\u0001P\u0001\u0000\u0001Q8\u0000\u0001R=\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001S\u0001T\u0007\u0000\u0001\u0015\u0001U\u0002\u0015\u0011\u0000\u0001\u0017\u0002\u0000\u0001V\u0001W\u0007\u0000\u0001W1\u0000\u0001X5\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u0001\u0015\u0002Y\b\u0015\u0001\u0000\u0005\u0015\u0001Z\u0001[\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0003\u0015\u0001\\\u0001\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u001e\u0000\u0002]\n\u0000\u0001^\u0002\u0000\u0001_\u0002`\u001a\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u0001\u0015\u0002a\b\u0015\u0001\u0000\u0001\u0015\u0001b\u0002\u0015\u0001c\u0001`\u0001d\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001e\u0002\u0015\u0001\u0000\u0005\u0015\u0001e\u0005\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001\u0015\u0001f\u0001\u0015\u0001\u0000\u0006\u0015\u0001f\u0004\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u00150\u0000\u0001g:\u0000\u0001h:\u0000\u0001i:\u0000\u0001j?\u0000\u0001k;\u0000\u0001l\f\u0000\n1\u0001m\u00041\u0001n61\u0001\u0000/1\u000f\u0000\u00011+\u0000\n4\u0001o\u00054\u0001p54\u0001\u0000/4\u0010\u0000\u000140\u0000\u0001q8\u0000\u0001rH\u0000\u0001s\b\u0000\u0001s\u001f\u0000\u0002:\u0001t>:\u0001u4:\u0006\u0000\u0001Q;\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0005>\u0001\u0000\u0001>\u0007\u0000\u0004>*\u0000\u0001v\u001f\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0001>\u0001w\u0003>\u0001\u0000\u0001>\u0007\u0000\u0004>\u000f\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0001x\u0002>\u0001\u0000\u0005>\u0001x\u0005>\u0001\u0000\u0005>\u0001\u0000\u0001>\u0007\u0000\u0004>\b\u0000\u0003B\u0001\u00007B\u0004y\u0001z6y\u0006\u0000\u0001{8\u0000\u0001|C\u0000\u0001}\u0007\u0000\u0001}%\u0000\u0002H\u0001\u00008H\u0006~\u0001\u007f4~\u0006\u0000\u0001\u0080F\u0000\u0001\u0081\b\u0000\u0001\u0081$\u0000\u0001\u00826\u0000\u0001\u0083\u0003\u0000\u0001\u0084\u0005\u0000\u0001\u0083\b\u0000\u0001\u00833\u0000\u0001\u0085\u0007\u0000\u0001\u0085,\u0000\u0003\u0015\u0003\u0000\u0001\u0086\u0003\u0000\u0003\u0015\u0001\u0000\u0001\u0086\n\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0003\u0015\u0001\u0087\u0001\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0003\u0015\u0001\u0088\u0011\u0000\u0001\u00896\u0000\u0001\u008a\u0003\u0000\u0001\u008a\u0004\u0000\u0001\u008a3\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u0003\u0015\u0002\u008b\u0006\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\n\u0015\u0001\u008c\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015+\u0000\u0001\u008d\u001e\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0002\u0015\u0001\u008e\u0002\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0001\u008f\u0003\u0015\u001b\u0000\u0001\u0090\b\u0000\u0001\u0090\u001e\u0000\u0006:\u0001\u00915:\u0001\u0092\t:\u0001\u0093\b:\u0001\u0093\u0001\u0000%:#\u0000\u0001\u0094\u001e\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0002>\u0001\u0095\u0002>\u0001\u0000\u0001>\u0007\u0000\u0004>\u000f\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0003>\u0001\u0096\u0001>\u0001\u0000\u0001>\u0007\u0000\u0004>\u0019\u0000\u0001\u0097\b\u0000\u0001\u0097!\u0000\u0001\u007f\t\u0000\u0001\u007f\u0001\u0000\u0001\u0098\u0006\u0000\u0001\u007f\u0001\u0098*\u0000\u0001\u0099F\u0000\u0001\u009a\b\u0000\u0001\u009a!\u0000\u0001\u0083\t\u0000\u0001\u0083\u0005\u0000\u0001\u009b\u0002\u0000\u0001\u0083\u0005\u0000\u0001\u009b\u0002\u0000\u0001\u009c\u001e\u0000\u0001\u009d\t\u0000\u0001\u009d\b\u0000\u0001\u009dU\u0000\u0001\u009e\u0012\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0001\u009f\u0003\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u0001\u0015\u0002 \b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001\u0015\u0001¡\u0001\u0015\u0001\u0000\u0006\u0015\u0001¡\u0004\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u0011\u0000\u0001\u0089\u0003\u0000\u0001W\u0007\u0000\u0001W.\u0000\u0001\u008aU\u0000\u0001¢\u001d\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0003\u0015\u0001£\u0001\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001¤\u0001\u0015\u0007\u0000\u0004\u0015\b\u0000\u0001:\u0001\u0092\u0001¥\b:\u0001\u0092\u0001:\u0001¦\u0006:\u0001\u0092\u0001¦&:\u0001\u0092\t:\u0001\u0093\u0001:\u0001¦\u0006:\u0001\u0093\u0001§%:$\u0000\u0001¨\u001d\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0003>\u0001©\u0001>\u0001\u0000\u0001>\u0007\u0000\u0004>\u000f\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\u000b>\u0001\u0000\u0001>\u0001ª\u0003>\u0001\u0000\u0001>\u0007\u0000\u0004>&\u0000\u0001«2\u0000\u0002¬$\u0000\u0001\u00ad\t\u0000\u0001\u00ad\b\u0000\u0001\u00ad8\u0000\u0001®\b\u0000\u0001®,\u0000\u0001¯\u0007\u0000\u0001¯&\u0000\u0001\u009d\t\u0000\u0001\u009d\u0005\u0000\u0001\u009b\u0002\u0000\u0001\u009d\u0005\u0000\u0001\u009bE\u0000\u0001°\u001c\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0004\u0015\u0001±\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\n\u0015\u0001²\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001³\u0002\u0015\u0001\u0000\u0005\u0015\u0001³\u0005\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u0019\u0000\u0001´\b\u0000\u0001´'\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0001µ\u0002\u0015\u0001\u0000\u0005\u0015\u0001µ\u0005\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u0015\u0000\u0001¶\u0007\u0000\u0001¶%\u0000\u0002:\u0001¥\u0003:\u0001·6:\u0001¥\u0013:\u0002¸9:\u0001¹\u0001¸#:\u0011\u0000\u0001º\b\u0000\u0001º'\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0001»\u0002>\u0001\u0000\u0005>\u0001»\u0005>\u0001\u0000\u0005>\u0001\u0000\u0001>\u0007\u0000\u0004>\u001a\u0000\u0001¼\b\u0000\u0001¼7\u0000\u0002½4\u0000\u0001¾\b\u0000\u0001¾/\u0000\u0001¿\b\u0000\u0001¿'\u0000\u0003\u0015\u0003\u0000\u0001À\u0003\u0000\u0003\u0015\u0001\u0000\u0001À\n\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\u000f\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001Á\u0001Â\u0007\u0000\u0004\u0015'\u0000\u0001Ã\"\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\n\u0015\u0001Ä\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\b\u0000\u0001:\u0001\u0092\u0001¥\b:\u0001\u0092\b:\u0001\u0092(:\u0001¥\u0015:\u0002Å9:\u0001Æ\u0001Å!:\u001f\u0000\u0001Ç\"\u0000\u0003>\u0003\u0000\u0001>\u0003\u0000\u0003>\u0001\u0000\n>\u0001ª\u0001\u0000\u0005>\u0001\u0000\u0001>\u0007\u0000\u0004>'\u0000\u0001È8\u0000\u0001É;\u0000\u0001Ê#\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\u000b\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0002\u0015\u0001Ë\u0001\u0015\u0015\u0000\u0001Ì\u0007\u0000\u0001Ì,\u0000\u0003\u0015\u0003\u0000\u0001Ë\u0003\u0000\u0003\u0015\u0001\u0000\u0001Ë\n\u0015\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015\b\u0000\u0002:\u0001¥\u000e:\u0001Í\b:\u0001Í1:\u0001Í\b:\u0001Î : \u0000\u0002Ï&\u0000\u0001Ð\u0007\u0000\u0001Ð7\u0000\u0001Ñ\b\u0000\u0001Ñ&\u0000\u0003\u0015\u0003\u0000\u0001\u0015\u0003\u0000\u0003\u0015\u0001\u0000\n\u0015\u0001±\u0001\u0000\u0005\u0015\u0001\u0000\u0001\u0015\u0007\u0000\u0004\u0015'\u0000\u0001°\u001b\u0000\u0002:\u0001¥\u000f:\u0001Ò\b:\u0001Ò1:\u0001Ò\b:\u0001Ó\u001f:\"\u0000\u0001\u0090)\u0000\u0001Ô\b\u0000\u0001Ô?\u0000\u0001Õ\u001b\u0000\u0002:\u0001¥T:\u0001\u0000\u001e:\u001e\u0000\u0001Ö<\u0000\u0002×+\u0000\u0001Ø\b\u0000\u0001ØA\u0000\u0001Ù7\u0000\u0001Ú;\u0000\u0002Û;\u0000\u0001Ü\u0019\u0000\u0001Ý\t\u0000\u0001Ý\b\u0000\u0001Ý'\u0000\u0001Ý\u0004\u0000\u0001Þ\u0004\u0000\u0001Ý\b\u0000\u0001Ý*\u0000\u0001ß6\u0000", offset, result);
		return result;
	}

	private static int zzUnpackTrans (String packed, int offset, int[] result)
	{
		int i = 0;
		int j = offset;
		int l = packed.length();

		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value = value - 1;

			while (true)
			{
				result[j++] = value;
				--count;
				if (count <= 0)
				{
					break;
				}
			}
		}

		return j;
	}

	private static int[] zzUnpackAttribute ()
	{
		int[] result = new int[223];
		int offset = 0;
		zzUnpackAttribute("\u0005\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0002\u0000\u0001\t\u0001\u0001\u0001\t\u0001\u0001\u0001\t\u0007\u0001\u0003\t\n\u0001\u0001\t\u0002\u0001\b\t\u0013\u0001\u0001\t\u0005\u0001\u0002\u0000\u0001\u0001\u0001\t\u0001\u0001\u0001\t\u0002\u0000\u0001\t\u0001\u0000\u0002\u0001\u0001\u0000\u0001\u0001\u0001\t\u0001\u0001\u0001\t\u0002\u0001\u0001\t\u0001\u0000\u0002\t\u0006\u0001\u0006\t\u0005\u0000\u0001\t\u0002\u0000\u0001\u0001\u0001\u0000\u0002\u0001\u0004\t\u0001\u0000\u0001\t\u0001\u0000\u0001\u0001\u0001\u0000\u0001\t\u0001\u0000\u0001\u0001\u0001\u0000\u0007\u0001\u0001\u0000\u0002\u0001\u0001\t\u0001\u0000\u0001\u0001\u0002\u0000\u0002\u0001\u0002\u0000\u0001\t\u0005\u0000\u0003\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0002\u0001\u0002\u0000\u0002\u0001\u0002\u0000\u0001\u0001\u0002\u0000\u0001\t\u0003\u0001\u0001\u0000\u0001\u0001\u0001\t\u0002\u0001\u0002\u0000\u0001\u0001\u0002\u0000\u0001\t\u0001\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\t\u0002\u0001\u0001\u0000\u0001\t\u0003\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0004\u0000\u0001\u0001\u0006\u0000\u0001\t\u0005\u0000\u0001\t", offset, result);
		return result;
	}

	private static int zzUnpackAttribute (String packed, int offset, int[] result)
	{
		int i = 0;
		int j = offset;
		int l = packed.length();

		while (i < l)
		{
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);

			while (true)
			{
				result[j++] = value;
				--count;
				if (count <= 0)
				{
					break;
				}
			}
		}

		return j;
	}

	public CappuccinoLexer ()
	{
		this((Reader)null);
	}

	CappuccinoLexer (Reader in)
	{
		this.zzLexicalState = 0;
		this.zzBuffer = "";
		this.zzAtBOL = true;
		this.zzFin = new boolean[16385];
		this.braceLevel = 0;
		this.afterTagStart = false;
		this.mySecondaryState = CappuccinoLexer.SecondaryState.INITIAL;
		this.zzReader = in;
	}

	private static char[] zzUnpackCMap (String packed)
	{
		int size = 0;
		for (int i = 0, length = packed.length(); i < length; i += 2) {
			size += packed.charAt(i);
		}
		char[] map = new char[size];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < packed.length()) {
			int  count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart ()
	{
		return this.zzStartRead;
	}

	public final int getTokenEnd ()
	{
		return this.getTokenStart() + this.yylength();
	}

	public void reset (CharSequence buffer, int start, int end, int initialState)
	{
		this.zzBuffer = buffer;
		this.zzCurrentPos = this.zzMarkedPos = this.zzStartRead = start;
		this.zzAtEOF = false;
		this.zzAtBOL = true;
		this.zzEndRead = end;
		this.yybegin(initialState);
	}

	private boolean zzRefill () throws IOException
	{
		return true;
	}

	public final int yystate ()
	{
		return this.zzLexicalState;
	}

	public final void yybegin (int newState)
	{
		this.zzLexicalState = newState;
	}

	public final CharSequence yytext ()
	{
		return this.zzBuffer.subSequence(this.zzStartRead, this.zzMarkedPos);
	}

	public final char yycharat (int pos)
	{
		return this.zzBuffer.charAt(this.zzStartRead + pos);
	}

	public final int yylength ()
	{
		return this.zzMarkedPos - this.zzStartRead;
	}

	private void zzScanError (int errorCode)
	{
		String message;
		try
		{
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException var4)
		{
			message = ZZ_ERROR_MSG[0];
		}

		throw new Error(message);
	}

	public void yypushback (int number)
	{
		if (number > this.yylength())
		{
			this.zzScanError(2);
		}

		this.zzMarkedPos -= number;
	}

	public IElementType advance () throws IOException
	{
		int zzEndReadL = this.zzEndRead;
		CharSequence zzBufferL = this.zzBuffer;
		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true)
		{
			int zzMarkedPosL = this.zzMarkedPos;
			int zzAction = -1;
			int zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
			this.zzState = ZZ_LEXSTATE[this.zzLexicalState];
			int zzAttributes = zzAttrL[this.zzState];
			if ((zzAttributes & 1) == 1)
			{
				zzAction = this.zzState;
			}

			int zzInput;
			int zzFState;
			while (true)
			{
				if (zzCurrentPosL < zzEndReadL)
				{
					zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
					zzCurrentPosL += Character.charCount(zzInput);
				}
				else
				{
					if (this.zzAtEOF)
					{
						zzInput = -1;
						break;
					}

					this.zzCurrentPos = zzCurrentPosL;
					this.zzMarkedPos = zzMarkedPosL;
					boolean eof = this.zzRefill();
					zzCurrentPosL = this.zzCurrentPos;
					zzMarkedPosL = this.zzMarkedPos;
					zzBufferL = this.zzBuffer;
					zzEndReadL = this.zzEndRead;
					if (eof)
					{
						zzInput = -1;
						break;
					}

					zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
					zzCurrentPosL += Character.charCount(zzInput);
				}

				zzFState = zzTransL[zzRowMapL[this.zzState] + ZZ_CMAP(zzInput)];
				if (zzFState == -1)
				{
					break;
				}

				this.zzState = zzFState;
				zzAttributes = zzAttrL[this.zzState];
				if ((zzAttributes & 1) == 1)
				{
					zzAction = this.zzState;
					zzMarkedPosL = zzCurrentPosL;
					if ((zzAttributes & 8) == 8)
					{
						break;
					}
				}
			}

			this.zzMarkedPos = zzMarkedPosL;
			if (zzInput == -1 && this.zzStartRead == this.zzCurrentPos)
			{
				this.zzAtEOF = true;
				return null;
			}

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
			{
				case 1:
					return CappuccinoTokenTypes.Companion.getTEMPLATE_HTML_TEXT();
				case 2:
					return CappuccinoTokenTypes.Companion.getCOMMENT();
				case 3:
					return CappuccinoTokenTypes.Companion.getVERBATIM_CONTENT();
				case 4:
					this.yybegin(0);
					return CappuccinoTokenTypes.Companion.getBAD_CHARACTER();
				case 5:
					return CappuccinoTokenTypes.Companion.getWHITE_SPACE();
				case 6:
					++this.braceLevel;
					return CappuccinoTokenTypes.Companion.getLBRACE_CURL();
				case 7:
					--this.braceLevel;
					return CappuccinoTokenTypes.Companion.getRBRACE_CURL();
				case 8:
					return CappuccinoTokenTypes.Companion.getMINUS();
				case 9:
					return CappuccinoTokenTypes.Companion.getMOD();
				case 10:
					return CappuccinoTokenTypes.Companion.getIDENTIFIER();
				case 11:
					return CappuccinoTokenTypes.Companion.getNUMBER();
				case 12:
					return CappuccinoTokenTypes.Companion.getDOT();
				case 13:
					return CappuccinoTokenTypes.Companion.getPLUS();
				case 14:
					this.yybegin(4);
					return CappuccinoTokenTypes.Companion.getDOUBLE_QUOTE();
				case 15:
					this.yybegin(6);
					return CappuccinoTokenTypes.Companion.getSINGLE_QUOTE();
				case 16:
					return CappuccinoTokenTypes.Companion.getEQ();
				case 17:
					return CappuccinoTokenTypes.Companion.getLT();
				case 18:
					return CappuccinoTokenTypes.Companion.getGT();
				case 19:
					return CappuccinoTokenTypes.Companion.getCONCAT();
				case 20:
					return CappuccinoTokenTypes.Companion.getMUL();
				case 21:
					return CappuccinoTokenTypes.Companion.getDIV();
				case 22:
					return CappuccinoTokenTypes.Companion.getLBRACE_SQ();
				case 23:
					return CappuccinoTokenTypes.Companion.getRBRACE_SQ();
				case 24:
					return CappuccinoTokenTypes.Companion.getCOLON();
				case 25:
					return CappuccinoTokenTypes.Companion.getCOMMA();
				case 26:
					return CappuccinoTokenTypes.Companion.getLBRACE();
				case 27:
					return CappuccinoTokenTypes.Companion.getRBRACE();
				case 28:
					return CappuccinoTokenTypes.Companion.getFILTER();
				case 29:
					return CappuccinoTokenTypes.Companion.getQUESTION();
				case 30:
					return CappuccinoTokenTypes.Companion.getSTRING_TEXT();
				case 31:
					this.yybegin(2);
					return CappuccinoTokenTypes.Companion.getDOUBLE_QUOTE();
				case 32:
					this.yybegin(2);
					return CappuccinoTokenTypes.Companion.getSINGLE_QUOTE();
				case 33:
					this.yybegin(2);
					this.mySecondaryState = CappuccinoLexer.SecondaryState.INITIAL;
					return CappuccinoTokenTypes.Companion.getTAG_NAME();
				case 34:
					return CappuccinoTokenTypes.Companion.getBAD_CHARACTER();
				case 35:
					this.yybegin(2);
					return CappuccinoTokenTypes.Companion.getPRINT_BLOCK_START();
				case 36:
					this.yybegin(14);
					return CappuccinoTokenTypes.Companion.getCOMMENT();
				case 37:
					this.yybegin(12);
					return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_START();
				case 38:
					if (this.braceLevel <= 0)
					{
						this.yybegin(0);
						return CappuccinoTokenTypes.Companion.getPRINT_BLOCK_END();
					}

					--this.braceLevel;
					this.yypushback(1);
					return CappuccinoTokenTypes.Companion.getRBRACE_CURL();
				case 39:
					this.yybegin(0);
					return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_END();
				case 40:
					return CappuccinoTokenTypes.Companion.getRANGE();
				case 41:
					return this.mySecondaryState == CappuccinoLexer.SecondaryState.IMPORT_STATEMENT ? CappuccinoTokenTypes.Companion.getAS_KEYWORD() : CappuccinoTokenTypes.Companion.getIDENTIFIER();
				case 42:
					return CappuccinoTokenTypes.Companion.getIN();
				case 43:
					return CappuccinoTokenTypes.Companion.getIF_KEYWORD();
				case 44:
					return CappuccinoTokenTypes.Companion.getIS();
				case 45:
					return CappuccinoTokenTypes.Companion.getOR();
				case 46:
					return CappuccinoTokenTypes.Companion.getEQ_EQ();
				case 47:
					return CappuccinoTokenTypes.Companion.getNOT_EQ();
				case 48:
					return CappuccinoTokenTypes.Companion.getLE();
				case 49:
					return CappuccinoTokenTypes.Companion.getGE();
				case 50:
					return CappuccinoTokenTypes.Companion.getPOW();
				case 51:
					return CappuccinoTokenTypes.Companion.getDIV_DIV();
				case 52:
					this.yybegin(10);
					return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_END();
				case 53:
					this.yybegin(0);
					return CappuccinoTokenTypes.Companion.getCOMMENT();
				case 54:
					return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_START();
				case 55:
					this.yybegin(18);
					return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_END();
				case 56:
					return CappuccinoTokenTypes.Companion.getAND();
				case 57:
					return CappuccinoTokenTypes.Companion.getNOT();
				case 58:
					return CappuccinoTokenTypes.Companion.getTAG_NAME();
				case 59:
					this.yybegin(2);
					this.mySecondaryState = CappuccinoLexer.SecondaryState.IMPORT_STATEMENT;
					return CappuccinoTokenTypes.Companion.getTAG_NAME();
				case 60:
					return CappuccinoTokenTypes.Companion.getRESERVED_ID();
				case 61:
					return CappuccinoTokenTypes.Companion.getBOOLEAN();
				case 62:
					zzFState = 10;
					int zzFPos = this.zzStartRead;
					if (this.zzFin.length <= zzBufferL.length())
					{
						this.zzFin = new boolean[zzBufferL.length() + 1];
					}

					boolean[] zzFinL;
					for (zzFinL = this.zzFin; zzFState != -1 && zzFPos < this.zzMarkedPos; zzFState = zzTransL[zzRowMapL[zzFState] + ZZ_CMAP(zzInput)])
					{
						zzFinL[zzFPos] = (zzAttrL[zzFState] & 1) == 1;
						zzInput = Character.codePointAt(zzBufferL, zzFPos);
						zzFPos += Character.charCount(zzInput);
					}

					if (zzFState != -1)
					{
						zzFinL[zzFPos++] = (zzAttrL[zzFState] & 1) == 1;
					}

					while (zzFPos <= this.zzMarkedPos)
					{
						zzFinL[zzFPos++] = false;
					}

					zzFState = 11;

					for (zzFPos = this.zzMarkedPos; !zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1; zzFState = zzTransL[zzRowMapL[zzFState] + ZZ_CMAP(zzInput)])
					{
						zzInput = Character.codePointBefore(zzBufferL, zzFPos);
						zzFPos -= Character.charCount(zzInput);
					}

					this.zzMarkedPos = zzFPos;
					this.yybegin(8);
					return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_START();
				case 63:
					return this.mySecondaryState == CappuccinoLexer.SecondaryState.IMPORT_STATEMENT ? CappuccinoTokenTypes.Companion.getIMPORT_KEYWORD() : CappuccinoTokenTypes.Companion.getIDENTIFIER();
				case 64:
					this.yypushback(this.yylength());
					this.yybegin(16);
					break;
				case 65:
					this.yypushback(this.yylength());
					this.yybegin(0);
					return CappuccinoTokenTypes.Companion.getVERBATIM_CONTENT();
				case 66:
				case 67:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 77:
				case 78:
				case 79:
				case 80:
				case 81:
				case 82:
				case 83:
				case 84:
				case 85:
				case 86:
				case 87:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 93:
				case 94:
				case 95:
				case 96:
				case 97:
				case 98:
				case 99:
				case 100:
				case 101:
				case 102:
				case 103:
				case 104:
				case 105:
				case 106:
				case 107:
				case 108:
				case 109:
				case 110:
				case 111:
				case 112:
				case 113:
				case 114:
				case 115:
				case 116:
				case 117:
				case 118:
				case 119:
				case 120:
				case 121:
				case 122:
				case 123:
				case 124:
				case 125:
				case 126:
				case 127:
				case 128:
				case 129:
				case 130:
					break;
				default:
					this.zzScanError(1);
			}
		}
	}

	private static enum SecondaryState
	{
		INITIAL,
		IMPORT_STATEMENT;

		private SecondaryState ()
		{
		}
	}

}
