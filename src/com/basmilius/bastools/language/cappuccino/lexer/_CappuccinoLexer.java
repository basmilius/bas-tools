/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.basmilius.bastools.language.cappuccino.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.basmilius.bastools.language.cappuccino.CappuccinoTokenTypes;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_CappuccinoLexer.flex</tt>
 */
public class _CappuccinoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_CAPPUCCINO_VAR = 2;
  public static final int ST_CAPPUCCINO_COMMENT = 4;
  public static final int ST_CAPPUCCINO_BLOCK_NAME = 6;
  public static final int ST_BLOCK_EXPRESSION = 8;
  public static final int ST_EXPRESSION_EXPRESSION = 10;
  public static final int ST_DOUBLE_QUOTES = 12;
  public static final int ST_BACKQUOTE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\2\7\2\23\1\7\22\0\1\22\1\55\1\11\1\3\1\0\1\4\1\50\1\35\1\60\1\61\1\65"+
    "\1\14\1\52\1\36\1\10\1\66\1\15\11\6\1\53\1\0\1\57\1\54\1\56\1\20\1\0\4\17"+
    "\1\13\1\17\24\5\1\62\1\12\1\63\1\0\1\5\1\0\1\32\1\34\1\46\1\41\1\30\1\31\1"+
    "\5\1\44\1\43\2\5\1\33\1\45\1\40\1\37\1\47\1\5\1\26\1\21\1\25\1\27\1\5\1\42"+
    "\1\16\2\5\1\1\1\51\1\2\1\64\6\5\1\24\172\5\250\0\2\23\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\3\1\3\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\6\1\15\1\13"+
    "\1\16\6\12\1\6\1\17\4\12\1\6\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\10\1\11\1\0\1\36"+
    "\1\37\1\40\1\0\1\41\1\42\1\13\1\0\1\43"+
    "\1\0\1\44\2\0\1\45\4\12\1\46\1\12\3\0"+
    "\1\47\1\50\1\12\1\51\1\52\1\53\2\12\1\54"+
    "\1\50\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\1\1\13\1\0\1\13\4\12\1\54\3\0\1\24"+
    "\3\12\1\64\1\12\2\0\1\65\1\0\3\12\1\0"+
    "\1\66\1\67\1\0\3\12\1\0\1\70\1\71\1\12"+
    "\2\0\1\72\3\0\1\73\1\0\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\67\0\u01ef\0\u0226\0\67\0\u025d\0\u0294\0\u02cb"+
    "\0\67\0\67\0\67\0\u025d\0\u0302\0\u0339\0\u0370\0\u03a7"+
    "\0\67\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528"+
    "\0\u055f\0\u0596\0\67\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\67\0\67\0\u0717\0\u074e\0\u0785\0\u07bc\0\67"+
    "\0\67\0\67\0\67\0\67\0\u07f3\0\u082a\0\u0861\0\67"+
    "\0\u0898\0\67\0\67\0\67\0\u08cf\0\67\0\67\0\u0906"+
    "\0\u093d\0\67\0\u03a7\0\67\0\u0974\0\u09ab\0\67\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0302\0\u0abe\0\u0596\0\u0af5\0\u0b2c"+
    "\0\67\0\u0302\0\u0b63\0\u0302\0\u0302\0\u0302\0\u0b9a\0\u0bd1"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\u0c08\0\u0c08\0\u09ab\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0302\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0302\0\u0e9c\0\u0ed3\0\u0f0a\0\67\0\u0f41\0\u0f78"+
    "\0\u0faf\0\u0fe6\0\u101d\0\67\0\67\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\67\0\u0302\0\u1167\0\u119e\0\u11d5\0\u0302"+
    "\0\u120c\0\u1243\0\u127a\0\67\0\u12b1\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\20\7\1\11\44\7\67\0\3\12\1\13"+
    "\3\12\1\14\12\12\1\14\2\0\42\12\4\15\1\16"+
    "\1\17\1\15\1\20\3\15\1\17\2\15\2\17\1\15"+
    "\1\17\1\20\1\0\11\17\2\15\11\17\17\15\1\21"+
    "\1\22\1\23\1\21\1\24\1\25\1\26\1\20\1\27"+
    "\1\30\1\21\1\25\1\31\1\32\2\25\1\33\1\34"+
    "\1\20\1\0\1\25\1\35\2\25\1\36\1\37\1\40"+
    "\1\25\1\41\1\42\1\43\1\44\1\45\2\25\1\46"+
    "\1\25\1\47\2\25\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\21\1\22\1\67\1\21\1\70\1\25"+
    "\1\26\1\20\1\27\1\30\1\21\1\25\1\31\1\32"+
    "\2\25\1\33\1\34\1\20\1\0\1\25\1\35\2\25"+
    "\1\36\1\37\1\40\1\25\1\41\1\42\1\43\1\44"+
    "\1\45\2\25\1\46\1\25\1\47\2\25\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\7\1\71\66\7"+
    "\1\72\1\7\1\73\1\74\13\7\2\0\46\7\1\75"+
    "\65\7\2\0\1\76\73\0\1\14\12\0\1\14\46\0"+
    "\1\77\71\0\2\17\4\0\1\17\1\0\3\17\1\0"+
    "\1\17\2\0\11\17\2\0\11\17\26\0\1\20\12\0"+
    "\1\20\51\0\2\25\4\0\1\25\1\0\3\25\1\0"+
    "\1\25\2\0\11\25\2\0\11\25\25\0\1\26\1\0"+
    "\1\100\2\0\1\101\1\0\1\26\12\0\1\101\44\0"+
    "\1\100\1\0\1\102\4\0\1\100\51\0\11\103\1\104"+
    "\1\105\54\103\6\0\1\26\1\0\1\100\2\0\1\101"+
    "\1\0\1\26\1\106\11\0\1\101\56\0\1\107\53\0"+
    "\2\25\4\0\1\25\1\0\3\25\1\0\1\25\2\0"+
    "\1\25\1\110\7\25\2\0\11\25\24\0\2\25\4\0"+
    "\1\25\1\0\3\25\1\0\1\25\2\0\2\25\1\111"+
    "\6\25\2\0\11\25\24\0\2\25\4\0\1\25\1\0"+
    "\3\25\1\0\1\25\2\0\11\25\2\0\1\25\1\112"+
    "\7\25\24\0\2\25\4\0\1\25\1\0\3\25\1\0"+
    "\1\25\2\0\6\25\1\113\2\25\2\0\11\25\24\0"+
    "\2\25\4\0\1\25\1\0\3\25\1\0\1\114\2\0"+
    "\11\25\2\0\1\25\1\115\7\25\24\0\2\25\2\0"+
    "\1\103\1\0\1\25\1\0\3\25\1\0\1\25\2\0"+
    "\11\25\1\116\1\117\11\25\17\0\12\116\1\120\22\116"+
    "\1\121\31\116\5\0\2\25\4\0\1\25\1\0\3\25"+
    "\1\0\1\25\2\0\2\25\1\122\6\25\2\0\11\25"+
    "\24\0\2\25\4\0\1\25\1\0\3\25\1\0\1\25"+
    "\2\0\11\25\2\0\1\123\10\25\24\0\2\25\4\0"+
    "\1\25\1\0\3\25\1\0\1\124\2\0\5\25\1\125"+
    "\3\25\2\0\1\25\1\126\4\25\1\127\2\25\24\0"+
    "\2\25\4\0\1\25\1\0\3\25\1\0\1\25\2\0"+
    "\6\25\1\130\2\25\2\0\11\25\67\0\1\131\67\0"+
    "\1\132\71\0\1\133\66\0\1\134\66\0\1\135\66\0"+
    "\1\136\77\0\1\137\67\0\1\140\2\0\1\141\64\0"+
    "\1\7\1\0\1\7\2\0\13\7\2\0\46\7\1\0"+
    "\1\7\2\0\13\7\1\0\1\142\45\7\6\0\1\100"+
    "\4\0\1\101\1\0\1\100\12\0\1\101\44\0\1\143"+
    "\5\0\1\144\1\143\20\0\1\144\40\0\1\103\64\0"+
    "\1\145\4\0\1\145\1\0\1\145\1\0\1\145\10\0"+
    "\3\145\1\0\1\145\4\0\1\145\4\0\1\145\25\0"+
    "\2\25\4\0\1\25\1\0\3\25\1\0\1\25\2\0"+
    "\6\25\1\146\2\25\2\0\11\25\24\0\2\25\4\0"+
    "\1\25\1\0\3\25\1\0\1\25\2\0\3\25\1\147"+
    "\5\25\2\0\11\25\24\0\2\25\4\0\1\25\1\0"+
    "\3\25\1\0\1\25\2\0\11\25\2\0\2\25\1\150"+
    "\6\25\24\0\2\25\4\0\1\25\1\0\3\25\1\0"+
    "\1\25\2\0\7\25\1\151\1\25\2\0\11\25\24\0"+
    "\2\25\4\0\1\25\1\0\3\25\1\0\1\25\2\0"+
    "\11\25\2\0\2\25\1\152\6\25\35\0\1\153\13\0"+
    "\1\154\4\0\1\155\37\0\1\116\63\0\2\25\4\0"+
    "\1\25\1\0\3\25\1\0\1\25\2\0\1\25\1\156"+
    "\7\25\2\0\11\25\24\0\2\25\4\0\1\25\1\0"+
    "\3\25\1\0\1\25\2\0\11\25\2\0\10\25\1\157"+
    "\24\0\2\25\4\0\1\25\1\0\3\25\1\0\1\25"+
    "\2\0\1\25\1\160\7\25\2\0\11\25\25\0\1\143"+
    "\6\0\1\143\56\0\2\25\4\0\1\25\1\0\3\25"+
    "\1\0\1\25\2\0\2\25\1\161\6\25\2\0\11\25"+
    "\24\0\2\25\4\0\1\25\1\0\3\25\1\0\1\25"+
    "\2\0\4\25\1\162\4\25\2\0\11\25\24\0\2\25"+
    "\4\0\1\25\1\0\3\25\1\0\1\163\2\0\11\25"+
    "\2\0\11\25\24\0\2\25\4\0\1\25\1\0\3\25"+
    "\1\0\1\147\2\0\11\25\2\0\11\25\56\0\1\164"+
    "\67\0\1\165\54\0\1\166\45\0\2\25\4\0\1\25"+
    "\1\0\3\25\1\0\1\25\1\167\1\0\11\25\2\0"+
    "\11\25\24\0\2\25\4\0\1\25\1\0\3\25\1\0"+
    "\1\25\2\0\11\25\2\0\1\170\10\25\24\0\2\25"+
    "\4\0\1\25\1\0\3\25\1\0\1\25\2\0\11\25"+
    "\2\0\7\25\1\171\1\25\24\0\2\25\4\0\1\25"+
    "\1\0\3\25\1\0\1\25\2\0\1\25\1\172\7\25"+
    "\2\0\11\25\24\0\2\25\4\0\1\25\1\0\3\25"+
    "\1\0\1\25\1\173\1\0\11\25\2\0\11\25\45\0"+
    "\1\174\101\0\1\175\70\0\1\176\30\0\2\25\4\0"+
    "\1\25\1\0\3\25\1\0\1\25\2\0\2\25\1\177"+
    "\6\25\2\0\11\25\24\0\2\25\4\0\1\25\1\0"+
    "\3\25\1\0\1\25\2\0\11\25\2\0\5\25\1\200"+
    "\3\25\24\0\2\25\4\0\1\25\1\0\3\25\1\0"+
    "\1\201\2\0\11\25\2\0\11\25\61\0\1\202\64\0"+
    "\1\203\33\0\2\25\4\0\1\25\1\0\3\25\1\0"+
    "\1\25\2\0\1\25\1\204\7\25\2\0\11\25\24\0"+
    "\2\25\4\0\1\25\1\0\3\25\1\0\1\25\2\0"+
    "\4\25\1\205\4\25\2\0\11\25\24\0\2\25\4\0"+
    "\1\25\1\0\3\25\1\0\1\25\1\206\1\0\11\25"+
    "\2\0\11\25\62\0\1\207\30\0\2\25\4\0\1\25"+
    "\1\0\3\25\1\0\1\210\2\0\11\25\2\0\11\25"+
    "\61\0\1\211\51\0\1\212\104\0\1\213\67\0\1\214"+
    "\47\0\1\215\105\0\1\216\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\4\0\3\1\1\11\2\1\1\11\3\1"+
    "\3\11\5\1\1\11\11\1\1\11\6\1\2\11\4\1"+
    "\5\11\3\1\1\11\1\0\3\11\1\0\2\11\1\1"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\6\1\3\0"+
    "\1\11\7\1\12\11\1\1\1\0\6\1\3\0\6\1"+
    "\2\0\1\11\1\0\3\1\1\0\2\11\1\0\3\1"+
    "\1\0\1\11\2\1\2\0\1\1\3\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CappuccinoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // raw content
        return CappuccinoTokenTypes.Companion.getTEMPLATE_HTML_TEXT();
            }
          case 61: break;
          case 2: 
            { return CappuccinoTokenTypes.Companion.getCOMMENT();
            }
          case 62: break;
          case 3: 
            { yybegin(YYINITIAL);
    	yypushback(1);
            }
          case 63: break;
          case 4: 
            { yybegin(ST_BLOCK_EXPRESSION);
        return CappuccinoTokenTypes.Companion.getTAG_NAME();
            }
          case 64: break;
          case 5: 
            { return CappuccinoTokenTypes.Companion.getWHITE_SPACE();
            }
          case 65: break;
          case 6: 
            { return CappuccinoTokenTypes.Companion.getBAD_CHARACTER();
            }
          case 66: break;
          case 7: 
            { return CappuccinoTokenTypes.Companion.getLBRACE_CURL();
            }
          case 67: break;
          case 8: 
            { return CappuccinoTokenTypes.Companion.getRBRACE_CURL();
            }
          case 68: break;
          case 9: 
            { return CappuccinoTokenTypes.Companion.getMOD();
            }
          case 69: break;
          case 10: 
            { return CappuccinoTokenTypes.Companion.getIDENTIFIER();
            }
          case 70: break;
          case 11: 
            { return CappuccinoTokenTypes.Companion.getNUMBER();
            }
          case 71: break;
          case 12: 
            { return CappuccinoTokenTypes.Companion.getDOT();
            }
          case 72: break;
          case 13: 
            { return CappuccinoTokenTypes.Companion.getPLUS();
            }
          case 73: break;
          case 14: 
            { return CappuccinoTokenTypes.Companion.getQUESTION();
            }
          case 74: break;
          case 15: 
            { return CappuccinoTokenTypes.Companion.getMINUS();
            }
          case 75: break;
          case 16: 
            { return CappuccinoTokenTypes.Companion.getFILTER();
            }
          case 76: break;
          case 17: 
            { return CappuccinoTokenTypes.Companion.getCOMMA();
            }
          case 77: break;
          case 18: 
            { return CappuccinoTokenTypes.Companion.getCOLON();
            }
          case 78: break;
          case 19: 
            { return CappuccinoTokenTypes.Companion.getEQ();
            }
          case 79: break;
          case 20: 
            { return CappuccinoTokenTypes.Companion.getNOT();
            }
          case 80: break;
          case 21: 
            { return CappuccinoTokenTypes.Companion.getGT();
            }
          case 81: break;
          case 22: 
            { return CappuccinoTokenTypes.Companion.getLT();
            }
          case 82: break;
          case 23: 
            { return CappuccinoTokenTypes.Companion.getLBRACE();
            }
          case 83: break;
          case 24: 
            { return CappuccinoTokenTypes.Companion.getRBRACE();
            }
          case 84: break;
          case 25: 
            { return CappuccinoTokenTypes.Companion.getLBRACE_SQ();
            }
          case 85: break;
          case 26: 
            { return CappuccinoTokenTypes.Companion.getRBRACE_SQ();
            }
          case 86: break;
          case 27: 
            { return CappuccinoTokenTypes.Companion.getCONCAT();
            }
          case 87: break;
          case 28: 
            { return CappuccinoTokenTypes.Companion.getMUL();
            }
          case 88: break;
          case 29: 
            { return CappuccinoTokenTypes.Companion.getDIV();
            }
          case 89: break;
          case 30: 
            { yybegin(ST_EXPRESSION_EXPRESSION);
        return CappuccinoTokenTypes.Companion.getPRINT_BLOCK_START();
            }
          case 90: break;
          case 31: 
            { yybegin(ST_CAPPUCCINO_COMMENT);
		return CappuccinoTokenTypes.Companion.getCOMMENT();
            }
          case 91: break;
          case 32: 
            { yybegin(ST_CAPPUCCINO_BLOCK_NAME);
        return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_START();
            }
          case 92: break;
          case 33: 
            { yybegin(YYINITIAL); return CappuccinoTokenTypes.Companion.getCOMMENT();
            }
          case 93: break;
          case 34: 
            { yybegin(YYINITIAL);
        return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_END();
            }
          case 94: break;
          case 35: 
            { return CappuccinoTokenTypes.Companion.getRANGE();
            }
          case 95: break;
          case 36: 
            { return CappuccinoTokenTypes.Companion.getDOUBLE_QUOTE();
            }
          case 96: break;
          case 37: 
            { return CappuccinoTokenTypes.Companion.getCOALESCE();
            }
          case 97: break;
          case 38: 
            { return CappuccinoTokenTypes.Companion.getAS_KEYWORD();
            }
          case 98: break;
          case 39: 
            { return CappuccinoTokenTypes.Companion.getSINGLE_QUOTE();
            }
          case 99: break;
          case 40: 
            { return CappuccinoTokenTypes.Companion.getOR();
            }
          case 100: break;
          case 41: 
            { return CappuccinoTokenTypes.Companion.getIS();
            }
          case 101: break;
          case 42: 
            { return CappuccinoTokenTypes.Companion.getIF_KEYWORD();
            }
          case 102: break;
          case 43: 
            { return CappuccinoTokenTypes.Companion.getIN();
            }
          case 103: break;
          case 44: 
            { return CappuccinoTokenTypes.Companion.getAND();
            }
          case 104: break;
          case 45: 
            { return CappuccinoTokenTypes.Companion.getEQ_EQ();
            }
          case 105: break;
          case 46: 
            { return CappuccinoTokenTypes.Companion.getNOT_EQ();
            }
          case 106: break;
          case 47: 
            { return CappuccinoTokenTypes.Companion.getGE();
            }
          case 107: break;
          case 48: 
            { return CappuccinoTokenTypes.Companion.getLE();
            }
          case 108: break;
          case 49: 
            { return CappuccinoTokenTypes.Companion.getPOW();
            }
          case 109: break;
          case 50: 
            { return CappuccinoTokenTypes.Companion.getDIV_DIV();
            }
          case 110: break;
          case 51: 
            { yybegin(YYINITIAL);
        return CappuccinoTokenTypes.Companion.getPRINT_BLOCK_END();
            }
          case 111: break;
          case 52: 
            { return CappuccinoTokenTypes.Companion.getBOOLEAN();
            }
          case 112: break;
          case 53: 
            { return CappuccinoTokenTypes.Companion.getBITWISE_OR();
            }
          case 113: break;
          case 54: 
            { return CappuccinoTokenTypes.Companion.getBITWISE_XOR();
            }
          case 114: break;
          case 55: 
            { return CappuccinoTokenTypes.Companion.getBITWISE_AND();
            }
          case 115: break;
          case 56: 
            { return CappuccinoTokenTypes.Companion.getNOT_IN();
            }
          case 116: break;
          case 57: 
            { return CappuccinoTokenTypes.Companion.getIMPORT_KEYWORD();
            }
          case 117: break;
          case 58: 
            { return CappuccinoTokenTypes.Companion.getMATCHES();
            }
          case 118: break;
          case 59: 
            { return CappuccinoTokenTypes.Companion.getENDS_WITH();
            }
          case 119: break;
          case 60: 
            { return CappuccinoTokenTypes.Companion.getSTARTS_WITH();
            }
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
