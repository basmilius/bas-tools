/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.basmilius.bastools.language.cappuccino.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.basmilius.bastools.language.cappuccino.CappuccinoTokenTypes;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_CappuccinoLexer.flex</tt>
 */
public class _CappuccinoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_CAPPUCCINO_VAR = 2;
  public static final int ST_CAPPUCCINO_COMMENT = 4;
  public static final int ST_CAPPUCCINO_BLOCK_NAME = 6;
  public static final int ST_BLOCK_EXPRESSION = 8;
  public static final int ST_EXPRESSION_EXPRESSION = 10;
  public static final int ST_DOUBLE_QUOTES = 12;
  public static final int ST_BACKQUOTE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\2\32\2\41\1\32\22\0\1\40\1\61\1\7\1\26\1\0\1\27\1\54\1\6\1\64\1\65\1"+
    "\71\1\35\1\56\1\45\1\33\1\72\1\11\7\2\2\1\1\57\1\0\1\63\1\60\1\62\1\10\1\0"+
    "\4\36\1\34\1\36\16\30\1\23\5\30\1\66\1\5\1\67\1\0\1\31\1\0\1\12\1\13\1\4\1"+
    "\47\1\43\1\14\1\30\1\51\1\50\2\30\1\44\1\52\1\15\1\46\1\53\1\30\1\16\1\37"+
    "\1\17\1\22\1\20\1\3\1\21\2\30\1\24\1\55\1\25\1\70\6\30\1\42\172\30\250\0\2"+
    "\41\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\3\1\3\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\2\6\1\11\1\7\5\10\1\12\1\13"+
    "\1\14\1\15\1\16\2\10\1\17\3\10\1\6\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\13\1\14\1\0"+
    "\1\36\1\37\1\40\1\0\1\41\1\42\1\7\3\0"+
    "\1\43\2\0\1\44\1\45\1\0\1\10\1\46\1\0"+
    "\3\10\1\47\2\10\1\50\1\51\1\52\1\53\2\10"+
    "\1\54\1\50\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\1\1\7\4\0\1\44\1\7\1\54\3\0"+
    "\1\10\1\24\5\10\5\0\1\64\1\0\1\65\4\10"+
    "\1\0\1\66\1\67\1\0\1\10\1\0\2\10\1\0"+
    "\1\70\1\10\1\0\1\71\1\10\2\0\1\72\3\0"+
    "\1\73\1\0\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\73\0\u0213\0\u024e\0\73\0\u0289\0\u02c4\0\u02ff"+
    "\0\73\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\73\0\73\0\u02c4\0\u05c3"+
    "\0\73\0\u05fe\0\u0639\0\73\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\73\0\73\0\u079b\0\u07d6\0\u0811\0\u084c\0\73"+
    "\0\73\0\73\0\73\0\73\0\u0887\0\u08c2\0\u08fd\0\73"+
    "\0\u0938\0\73\0\73\0\73\0\u0973\0\73\0\73\0\u09ae"+
    "\0\u09e9\0\u03b0\0\u0a24\0\73\0\u03eb\0\u0a5f\0\u0a9a\0\73"+
    "\0\u0ad5\0\u0b10\0\u0375\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\73"+
    "\0\u0c37\0\u0c72\0\u0375\0\u0375\0\u0375\0\u0375\0\u0cad\0\u0ce8"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\u0d23\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\73"+
    "\0\u0ad5\0\u0375\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\73\0\u1184\0\u0375\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\73\0\73\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\73\0\u1448\0\u1483\0\u0375\0\u14be\0\u14f9\0\u1534"+
    "\0\u0375\0\u156f\0\u15aa\0\u15e5\0\73\0\u1620\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\24\7\1\10\13\7\1\11\32\7\73\0\26\12\1\13"+
    "\3\12\1\14\5\12\1\14\2\0\30\12\3\15\2\16"+
    "\5\15\12\16\3\15\1\17\2\16\1\20\1\15\1\16"+
    "\1\15\2\16\1\20\1\0\3\16\1\15\6\16\17\15"+
    "\1\21\2\22\2\23\1\21\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\23\1\34\4\23\1\35"+
    "\1\36\1\21\1\37\2\23\1\20\1\40\1\23\1\41"+
    "\1\23\1\42\1\20\1\0\1\23\1\43\1\23\1\44"+
    "\1\45\1\23\1\46\1\23\1\47\1\23\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\21\2\22\2\23"+
    "\1\21\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\23\1\34\4\23\1\35\1\67\1\21\1\70"+
    "\2\23\1\20\1\40\1\23\1\41\1\23\1\42\1\20"+
    "\1\0\1\23\1\43\1\23\1\44\1\45\1\23\1\46"+
    "\1\23\1\47\1\23\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\24\7\1\71\56\7\1\0\13\7\1\72"+
    "\1\7\1\73\1\74\7\7\1\0\57\7\1\75\46\7"+
    "\25\0\1\76\77\0\1\14\5\0\1\14\33\0\4\16"+
    "\4\0\13\16\4\0\2\16\2\0\1\16\1\0\2\16"+
    "\2\0\3\16\1\0\6\16\44\0\1\77\77\0\1\20"+
    "\5\0\1\20\33\0\2\22\6\0\1\22\21\0\1\100"+
    "\1\101\6\0\1\101\30\0\4\23\4\0\13\23\4\0"+
    "\2\23\2\0\1\23\1\0\2\23\2\0\3\23\1\0"+
    "\6\23\17\0\5\102\1\103\1\104\64\102\5\105\1\106"+
    "\1\105\1\107\63\105\10\0\1\110\63\0\2\22\6\0"+
    "\1\22\7\0\1\111\11\0\1\100\1\101\6\0\1\101"+
    "\30\0\4\23\4\0\4\23\1\112\6\23\4\0\2\23"+
    "\2\0\1\23\1\0\1\23\1\113\2\0\3\23\1\0"+
    "\6\23\20\0\4\23\1\0\1\102\2\0\13\23\4\0"+
    "\2\23\2\0\1\23\1\0\2\23\2\0\3\23\1\114"+
    "\6\23\20\0\4\23\4\0\1\23\1\115\11\23\4\0"+
    "\2\23\2\0\1\23\1\0\2\23\2\0\3\23\1\0"+
    "\6\23\20\0\4\23\4\0\13\23\4\0\2\23\2\0"+
    "\1\23\1\0\2\23\2\0\3\23\1\0\1\116\5\23"+
    "\20\0\4\23\4\0\5\23\1\117\5\23\4\0\2\23"+
    "\2\0\1\23\1\0\2\23\2\0\3\23\1\0\6\23"+
    "\20\0\2\100\6\0\1\100\21\0\1\120\40\0\4\23"+
    "\4\0\6\23\1\121\4\23\4\0\2\23\2\0\1\23"+
    "\1\0\2\23\2\0\3\23\1\0\6\23\20\0\4\23"+
    "\4\0\4\23\1\122\6\23\4\0\2\23\2\0\1\23"+
    "\1\0\2\23\2\0\3\23\1\0\6\23\20\0\4\23"+
    "\4\0\5\23\1\123\5\23\4\0\2\23\2\0\1\23"+
    "\1\0\2\23\2\0\3\23\1\0\6\23\20\0\4\23"+
    "\4\0\3\23\1\124\1\125\6\23\4\0\2\23\2\0"+
    "\1\23\1\0\1\23\1\126\2\0\3\23\1\0\4\23"+
    "\1\127\1\23\20\0\4\23\4\0\1\23\1\130\11\23"+
    "\4\0\2\23\2\0\1\23\1\0\2\23\2\0\3\23"+
    "\1\0\6\23\73\0\1\131\73\0\1\132\75\0\1\133"+
    "\72\0\1\134\72\0\1\135\72\0\1\136\103\0\1\137"+
    "\73\0\1\140\25\0\1\141\45\0\10\7\1\0\13\7"+
    "\1\0\1\7\2\0\7\7\1\0\43\7\1\0\13\7"+
    "\1\0\1\7\2\0\7\7\1\142\33\7\1\0\2\100"+
    "\6\0\1\100\22\0\1\101\6\0\1\101\30\0\2\143"+
    "\6\0\1\143\23\0\1\144\7\0\1\144\60\0\1\102"+
    "\41\0\1\105\2\0\14\105\1\145\1\146\1\147\52\0"+
    "\2\150\42\0\1\150\24\0\2\151\1\0\1\151\4\0"+
    "\4\151\17\0\1\151\1\0\1\151\4\0\1\151\3\0"+
    "\1\151\24\0\4\23\4\0\13\23\4\0\2\23\2\0"+
    "\1\23\1\0\2\23\2\0\3\23\1\0\1\23\1\152"+
    "\4\23\31\0\1\153\6\0\1\154\24\0\1\155\25\0"+
    "\4\23\4\0\13\23\4\0\2\23\2\0\1\23\1\0"+
    "\2\23\2\0\2\23\1\156\1\0\6\23\20\0\4\23"+
    "\4\0\6\23\1\157\4\23\4\0\2\23\2\0\1\23"+
    "\1\0\2\23\2\0\3\23\1\0\6\23\20\0\4\23"+
    "\4\0\11\23\1\160\1\23\4\0\2\23\2\0\1\23"+
    "\1\0\2\23\2\0\3\23\1\0\6\23\20\0\4\23"+
    "\4\0\1\23\1\161\11\23\4\0\2\23\2\0\1\23"+
    "\1\0\2\23\2\0\3\23\1\0\6\23\20\0\4\23"+
    "\4\0\13\23\4\0\2\23\2\0\1\23\1\0\2\23"+
    "\2\0\3\23\1\0\1\23\1\162\4\23\20\0\4\23"+
    "\4\0\13\23\4\0\2\23\2\0\1\23\1\0\2\23"+
    "\2\0\3\23\1\0\5\23\1\163\20\0\4\23\4\0"+
    "\6\23\1\164\4\23\4\0\2\23\2\0\1\23\1\0"+
    "\2\23\2\0\3\23\1\0\6\23\20\0\2\143\6\0"+
    "\1\143\62\0\2\165\1\0\1\165\4\0\4\165\14\0"+
    "\1\165\2\0\1\165\1\0\1\165\4\0\1\165\3\0"+
    "\1\165\24\0\2\166\1\0\1\166\4\0\4\166\14\0"+
    "\1\166\2\0\1\166\1\0\1\166\4\0\1\166\3\0"+
    "\1\166\24\0\2\167\1\0\1\167\4\0\4\167\14\0"+
    "\1\167\2\0\1\167\1\0\1\167\4\0\1\167\3\0"+
    "\1\167\40\0\1\170\123\0\1\171\42\0\1\172\55\0"+
    "\4\23\4\0\13\23\4\0\2\23\2\0\1\23\1\0"+
    "\1\23\1\160\2\0\3\23\1\0\6\23\20\0\4\23"+
    "\4\0\13\23\4\0\2\23\2\0\1\23\1\0\2\23"+
    "\1\173\1\0\3\23\1\0\6\23\20\0\4\23\4\0"+
    "\13\23\4\0\2\23\2\0\1\23\1\0\2\23\2\0"+
    "\1\23\1\174\1\23\1\0\6\23\20\0\4\23\4\0"+
    "\5\23\1\175\5\23\4\0\2\23\2\0\1\23\1\0"+
    "\2\23\2\0\3\23\1\0\6\23\20\0\4\23\4\0"+
    "\13\23\4\0\2\23\2\0\1\23\1\0\1\23\1\176"+
    "\2\0\3\23\1\0\6\23\20\0\4\23\4\0\13\23"+
    "\4\0\2\23\2\0\1\23\1\0\2\23\2\0\3\23"+
    "\1\0\1\177\5\23\20\0\3\23\1\200\4\0\13\23"+
    "\4\0\2\23\2\0\1\23\1\0\2\23\2\0\3\23"+
    "\1\0\6\23\20\0\2\105\1\0\1\105\4\0\4\105"+
    "\14\0\1\105\2\0\1\105\1\0\1\105\4\0\1\105"+
    "\3\0\1\105\24\0\2\145\1\0\1\145\4\0\4\145"+
    "\14\0\1\145\2\0\1\145\1\0\1\145\4\0\1\145"+
    "\3\0\1\145\24\0\2\201\1\0\1\201\4\0\4\201"+
    "\14\0\1\201\2\0\1\201\1\0\1\201\4\0\1\201"+
    "\3\0\1\201\72\0\1\202\41\0\1\203\124\0\1\204"+
    "\23\0\4\23\4\0\6\23\1\205\4\23\4\0\2\23"+
    "\2\0\1\23\1\0\2\23\2\0\3\23\1\0\6\23"+
    "\20\0\4\23\4\0\13\23\4\0\2\23\2\0\1\23"+
    "\1\0\2\23\1\206\1\0\3\23\1\0\6\23\20\0"+
    "\4\23\4\0\5\23\1\207\5\23\4\0\2\23\2\0"+
    "\1\23\1\0\2\23\2\0\3\23\1\0\6\23\20\0"+
    "\4\23\4\0\13\23\4\0\2\23\2\0\1\23\1\0"+
    "\2\23\2\0\3\23\1\0\3\23\1\210\2\23\20\0"+
    "\2\211\1\0\1\211\4\0\4\211\14\0\1\211\2\0"+
    "\1\211\1\0\1\211\4\0\1\211\3\0\1\211\40\0"+
    "\1\212\56\0\4\23\4\0\13\23\4\0\2\23\2\0"+
    "\1\23\1\0\1\23\1\213\2\0\3\23\1\0\6\23"+
    "\22\0\1\214\70\0\4\23\4\0\6\23\1\215\4\23"+
    "\4\0\2\23\2\0\1\23\1\0\2\23\2\0\3\23"+
    "\1\0\6\23\20\0\4\23\4\0\13\23\4\0\2\23"+
    "\2\0\1\23\1\0\2\23\2\0\1\23\1\216\1\23"+
    "\1\0\6\23\20\0\2\146\1\0\1\146\4\0\4\146"+
    "\14\0\1\146\2\0\1\146\1\0\1\146\4\0\1\146"+
    "\3\0\1\146\24\0\4\23\4\0\13\23\4\0\2\23"+
    "\2\0\1\23\1\0\2\23\1\217\1\0\3\23\1\0"+
    "\6\23\67\0\1\220\23\0\4\23\4\0\13\23\4\0"+
    "\2\23\2\0\1\23\1\0\1\23\1\221\2\0\3\23"+
    "\1\0\6\23\22\0\1\222\106\0\1\223\123\0\1\224"+
    "\73\0\1\225\40\0\1\226\124\0\1\227\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5723];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\4\0\3\1\1\11\2\1\1\11\3\1"+
    "\1\11\13\1\2\11\2\1\1\11\2\1\1\11\5\1"+
    "\2\11\4\1\5\11\3\1\1\11\1\0\3\11\1\0"+
    "\2\11\1\1\3\0\1\11\2\0\1\1\1\11\1\0"+
    "\2\1\1\0\3\1\1\11\10\1\12\11\1\1\4\0"+
    "\1\11\2\1\3\0\7\1\5\0\1\11\1\0\5\1"+
    "\1\0\2\11\1\0\1\1\1\0\2\1\1\0\1\11"+
    "\1\1\1\0\2\1\2\0\1\1\3\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CappuccinoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // raw content
        return CappuccinoTokenTypes.Companion.getTEMPLATE_HTML_TEXT();
            } 
            // fall through
          case 61: break;
          case 2: 
            { return CappuccinoTokenTypes.Companion.getCOMMENT();
            } 
            // fall through
          case 62: break;
          case 3: 
            { yybegin(YYINITIAL);
    	yypushback(1);
            } 
            // fall through
          case 63: break;
          case 4: 
            { yybegin(ST_BLOCK_EXPRESSION);
        return CappuccinoTokenTypes.Companion.getTAG_NAME();
            } 
            // fall through
          case 64: break;
          case 5: 
            { return CappuccinoTokenTypes.Companion.getWHITE_SPACE();
            } 
            // fall through
          case 65: break;
          case 6: 
            { return CappuccinoTokenTypes.Companion.getBAD_CHARACTER();
            } 
            // fall through
          case 66: break;
          case 7: 
            { return CappuccinoTokenTypes.Companion.getNUMBER();
            } 
            // fall through
          case 67: break;
          case 8: 
            { return CappuccinoTokenTypes.Companion.getIDENTIFIER();
            } 
            // fall through
          case 68: break;
          case 9: 
            { return CappuccinoTokenTypes.Companion.getQUESTION();
            } 
            // fall through
          case 69: break;
          case 10: 
            { return CappuccinoTokenTypes.Companion.getLBRACE_CURL();
            } 
            // fall through
          case 70: break;
          case 11: 
            { return CappuccinoTokenTypes.Companion.getRBRACE_CURL();
            } 
            // fall through
          case 71: break;
          case 12: 
            { return CappuccinoTokenTypes.Companion.getMOD();
            } 
            // fall through
          case 72: break;
          case 13: 
            { return CappuccinoTokenTypes.Companion.getDOT();
            } 
            // fall through
          case 73: break;
          case 14: 
            { return CappuccinoTokenTypes.Companion.getPLUS();
            } 
            // fall through
          case 74: break;
          case 15: 
            { return CappuccinoTokenTypes.Companion.getMINUS();
            } 
            // fall through
          case 75: break;
          case 16: 
            { return CappuccinoTokenTypes.Companion.getFILTER();
            } 
            // fall through
          case 76: break;
          case 17: 
            { return CappuccinoTokenTypes.Companion.getCOMMA();
            } 
            // fall through
          case 77: break;
          case 18: 
            { return CappuccinoTokenTypes.Companion.getCOLON();
            } 
            // fall through
          case 78: break;
          case 19: 
            { return CappuccinoTokenTypes.Companion.getEQ();
            } 
            // fall through
          case 79: break;
          case 20: 
            { return CappuccinoTokenTypes.Companion.getNOT();
            } 
            // fall through
          case 80: break;
          case 21: 
            { return CappuccinoTokenTypes.Companion.getGT();
            } 
            // fall through
          case 81: break;
          case 22: 
            { return CappuccinoTokenTypes.Companion.getLT();
            } 
            // fall through
          case 82: break;
          case 23: 
            { return CappuccinoTokenTypes.Companion.getLBRACE();
            } 
            // fall through
          case 83: break;
          case 24: 
            { return CappuccinoTokenTypes.Companion.getRBRACE();
            } 
            // fall through
          case 84: break;
          case 25: 
            { return CappuccinoTokenTypes.Companion.getLBRACE_SQ();
            } 
            // fall through
          case 85: break;
          case 26: 
            { return CappuccinoTokenTypes.Companion.getRBRACE_SQ();
            } 
            // fall through
          case 86: break;
          case 27: 
            { return CappuccinoTokenTypes.Companion.getCONCAT();
            } 
            // fall through
          case 87: break;
          case 28: 
            { return CappuccinoTokenTypes.Companion.getMUL();
            } 
            // fall through
          case 88: break;
          case 29: 
            { return CappuccinoTokenTypes.Companion.getDIV();
            } 
            // fall through
          case 89: break;
          case 30: 
            { yybegin(ST_EXPRESSION_EXPRESSION);
        return CappuccinoTokenTypes.Companion.getPRINT_BLOCK_START();
            } 
            // fall through
          case 90: break;
          case 31: 
            { yybegin(ST_CAPPUCCINO_COMMENT);
		return CappuccinoTokenTypes.Companion.getCOMMENT();
            } 
            // fall through
          case 91: break;
          case 32: 
            { yybegin(ST_CAPPUCCINO_BLOCK_NAME);
        return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_START();
            } 
            // fall through
          case 92: break;
          case 33: 
            { yybegin(YYINITIAL); return CappuccinoTokenTypes.Companion.getCOMMENT();
            } 
            // fall through
          case 93: break;
          case 34: 
            { yybegin(YYINITIAL);
        return CappuccinoTokenTypes.Companion.getSTATEMENT_BLOCK_END();
            } 
            // fall through
          case 94: break;
          case 35: 
            { return CappuccinoTokenTypes.Companion.getSINGLE_QUOTE();
            } 
            // fall through
          case 95: break;
          case 36: 
            { return CappuccinoTokenTypes.Companion.getDOUBLE_QUOTE();
            } 
            // fall through
          case 96: break;
          case 37: 
            { return CappuccinoTokenTypes.Companion.getCOALESCE();
            } 
            // fall through
          case 97: break;
          case 38: 
            { return CappuccinoTokenTypes.Companion.getAS_KEYWORD();
            } 
            // fall through
          case 98: break;
          case 39: 
            { return CappuccinoTokenTypes.Companion.getRANGE();
            } 
            // fall through
          case 99: break;
          case 40: 
            { return CappuccinoTokenTypes.Companion.getOR();
            } 
            // fall through
          case 100: break;
          case 41: 
            { return CappuccinoTokenTypes.Companion.getIF_KEYWORD();
            } 
            // fall through
          case 101: break;
          case 42: 
            { return CappuccinoTokenTypes.Companion.getIN();
            } 
            // fall through
          case 102: break;
          case 43: 
            { return CappuccinoTokenTypes.Companion.getIS();
            } 
            // fall through
          case 103: break;
          case 44: 
            { return CappuccinoTokenTypes.Companion.getAND();
            } 
            // fall through
          case 104: break;
          case 45: 
            { return CappuccinoTokenTypes.Companion.getEQ_EQ();
            } 
            // fall through
          case 105: break;
          case 46: 
            { return CappuccinoTokenTypes.Companion.getNOT_EQ();
            } 
            // fall through
          case 106: break;
          case 47: 
            { return CappuccinoTokenTypes.Companion.getGE();
            } 
            // fall through
          case 107: break;
          case 48: 
            { return CappuccinoTokenTypes.Companion.getLE();
            } 
            // fall through
          case 108: break;
          case 49: 
            { return CappuccinoTokenTypes.Companion.getPOW();
            } 
            // fall through
          case 109: break;
          case 50: 
            { return CappuccinoTokenTypes.Companion.getDIV_DIV();
            } 
            // fall through
          case 110: break;
          case 51: 
            { yybegin(YYINITIAL);
        return CappuccinoTokenTypes.Companion.getPRINT_BLOCK_END();
            } 
            // fall through
          case 111: break;
          case 52: 
            { return CappuccinoTokenTypes.Companion.getBITWISE_OR();
            } 
            // fall through
          case 112: break;
          case 53: 
            { return CappuccinoTokenTypes.Companion.getBOOLEAN();
            } 
            // fall through
          case 113: break;
          case 54: 
            { return CappuccinoTokenTypes.Companion.getBITWISE_AND();
            } 
            // fall through
          case 114: break;
          case 55: 
            { return CappuccinoTokenTypes.Companion.getBITWISE_XOR();
            } 
            // fall through
          case 115: break;
          case 56: 
            { return CappuccinoTokenTypes.Companion.getNOT_IN();
            } 
            // fall through
          case 116: break;
          case 57: 
            { return CappuccinoTokenTypes.Companion.getIMPORT_KEYWORD();
            } 
            // fall through
          case 117: break;
          case 58: 
            { return CappuccinoTokenTypes.Companion.getMATCHES();
            } 
            // fall through
          case 118: break;
          case 59: 
            { return CappuccinoTokenTypes.Companion.getENDS_WITH();
            } 
            // fall through
          case 119: break;
          case 60: 
            { return CappuccinoTokenTypes.Companion.getSTARTS_WITH();
            } 
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
